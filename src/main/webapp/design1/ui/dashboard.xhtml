<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/design1/_general/template.xhtml">

    <ui:define name="head">        
        <script type="text/javascript">
            //<![CDATA[
                function handleMessage(facesmessage) {
                    facesmessage.severity = 'info';
                    
                    PF('growl').show([facesmessage]);
                }
            //]]> 
        </script>
    </ui:define>
    
    <ui:define name="title">
        Dashboard
    </ui:define>

    <ui:define name="description">
        Dashboard ...
    </ui:define>
	
	
    <ui:define name="implementation">
	  <div style="padding:30px">
      	
      	<div>
	    	<input type="checkbox" checked="true"/>
	        <span>Créer un modèle de list où seules les colonnes, actions et autres paramètres variables seront indiquées
	        </span>  
	    </div>	    
	    <div>
	    	<hr/>
	    	<input type="checkbox" checked="true"/>
	        <span>Créer une home page par module : <br/>
	        Cette home page doit regrouper des liens par groupe : ex: <br/>
	        Achat : Fournisseur, Demandes de devis, Bons de commandes, Factures <br/> 
	        Produits : Produits, Produits par groupe <br/>
	        Analyse : Demandes en cours, Quantités rentrantes
	        </span>  
	    </div>
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> Rêgler le problème de redirection lors du click sur le button du button modifier du ContextMenu
	        </span>  
	    </div>
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> Dialog Favoris (Ctrl + F) -> Affiche un dialog contenant la liste des favoris <b>Action générique addToFavoris )</b>
	        </span>  
	    </div>
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> Gestion des droits d'accès par profil. E.g. <b>Magansinier</b><br/>
	        1. Droits d'accès sur tous les niveaux : Modules / Sous Modules / Vues / Actions<br/>
	        2. Création de profils de droits d'accès : Magansinier, Caissier ...#<br/>
	        3. Possibilité de personnaliser les droits un fois un profil affecté à une personne
	        </span>  
	    </div>
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> 
	    	Suppression logique (flag = 1) / Modifier la requête find all
	    	</span>
	    </div>
	    
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> 
	    	Gestion de l'accès concurrent ( comme pour <b>windev HBlock</b>) <br/>
	    	<b>Voir au niveau <u>d'hibernate</u> <span style="color:red">spring data jpa concurrency</span></b> <br/>
	    	<b><span style="color:green">@Lock(LockModeType.PESSIMISTIC_WRITE)</span></b><br/>
	    	<a href="http://www.objectdb.com/java/jpa/persistence/lock#Pessimistic_Locking_"><b><span style="color:blue">Locking in JPA</span></b></a>
	    	</span>
	    </div>
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> Commencer à mettre en place la gestion
	        </span>  
	    </div>
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> ROW EXPAND Pas très pratique (mais faisable)
	        </span>  
	    </div>
	    
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> Externaliser et Factoriser la partie variables des pages JSF. Par exemple : <br/>
	        1. Vue List : p:datatable .... Laisser seulement les colonnes, filtres et ce qui varie<br/>
	        2. Vue Ajout : rien à concentrer apparement
	        </span>  
	    </div>
	    
	    <div>
	    	<hr/>
	    	<input type="checkbox" />
	        <span> Penser à une façon pour externaliser le code des traitements complexes qui touche plusieurs entités genre : GenerationBilanComptable , Alimentation de stock ...<br/>
	          Essayer de le mettre dans des classes de service par exemple pour le cas du traitement GenerationBilanComptable faire ce qui suit :<br/>
	          1. Créer un service BilanComptable : qui fait appel à plusieurs objets Service (Comme attribut injectés)<br/>
	          2. Mettre le traitement correspondant dans une méthode<br/>
	          3. <b>Forcer le paramètrage pour favoriser le découplage</b><br/>
	        </span>  
	    </div>
	    <br/>
	    <br/>
	    <p:panel id="lazyContent">
	    	
	    	<p:poll interval="3" listener="#{core.bean().runAction('loadStatsData')}" update=":mainForm:lazyContent" />
	    	
	    	<h1><p:outputLabel value="#{core.bean().getCount()}"/></h1>
	    </p:panel>
      </div>
    </ui:define>
    
	<ui:define name="actions">
		
	</ui:define>
	
	<ui:define name="dialogs"> 
  		
	</ui:define>
	
</ui:composition>
